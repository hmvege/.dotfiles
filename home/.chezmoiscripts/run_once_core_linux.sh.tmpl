{{ if (eq .chezmoi.os "linux") -}}
{{ if (eq .chezmoi.osRelease.id "ubuntu") -}}
#!/bin/bash

# Set to catch non-zero exit status errors, variable errors or pipeline 
# failures.
set -euo pipefail

sudo apt-get update

packages=(
    # Various CLI tools
    bat
    fd-find
    git
    htop
    jq
    mc
    tmux
    vim
    rename
    unzip
    wget
    zsh
    # fasd
    # Various packages needed for development
    build-essential
    libssl-dev
    libbz2-dev
    libffi-dev
    liblzma-dev
    libreadline-dev
    libsqlite3-dev
    python-tk
    python3
    python3-venv
    python3-pip
    python3-tk
    tk-dev
    zlib1g-dev
    # For Gogh
    dconf-cli
    uuid-runtime
)

sudo apt install -y ${packages[@]}
echo "Packages installed."

sudo chsh -s $(which zsh)

## Bat
mkdir -vp ~/.local/bin
if [ ! -L ~/.local/bin/bat ]
then
    ln -s /usr/bin/batcat ~/.local/bin/bat
    echo "Bat is installed and linked"
else
    echo "Bat is already installed and linked"
fi

## Oh-my-zsh
if [ -d "${HOME}/.oh-my-zsh" ]; then
    echo "Oh My Zsh already installed at: ${HOME}/.oh-my-zsh"
else
    # sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended --keep-zshrc
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
    echo "Oh My Zsh is installed."
fi

# Oh-my-zsh plugins
if [ ! -d ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting ]
then
    git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting
    echo "zsh-syntax-highlighting downloaded and installed"
else
    echo "zsh-syntax-highlighting already installed"
fi

if [ ! -d ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions ]
then
    git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions
    echo "zsh-autosuggestions downloaded and installed"
else
    echo "zsh-autosuggestions already installed"
fi

## tmux plugins
if [ ! -d "${HOME}/.tmux/plugins/tpm" ]
then
    git clone https://github.com/tmux-plugins/tpm ${HOME}/.tmux/plugins/tpm
    echo "tmux plugin manager installed."
else
    echo "tmux plugin manager already installed."
fi

## vim plugin manager
if [ ! -d "${HOME}/.vim/autoload/plug.vim" ]
then
    curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
        https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    echo "vim plugin manager installed"
else
    echo "vim plugin manager already installed"
fi

## install fzf
if ! type -p fzf >/dev/null 2>&1
then
    git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
    ~/.fzf/install --all
    echo "Installed fzf"
else
    echo "Already installed fzf"
fi

## pipx
if ! type -p pipx >/dev/null 2>&1
then
    sudo /usr/bin/python3 -m pip install pipx
    echo "Installed pipx"
    /usr/local/bin/pipx ensurepath
    pipx_packages=(
        flake8
        mypy
        black
        pip-tools
        pre-commit
    )
    for pkg in ${pipx_packages[@]}
    do
        /usr/local/bin/pipx install $pkg
    done
else
    echo "Already installed pipx"
fi

## pyenv + pyenv-virtualenv
## Snippet inspired and taken from
# https://github.com/tordks/.dotfiles/blob/master/install_pyenv.sh
# See https://github.com/pyenv/pyenv-virtualenv/issues/233
if ! type -p pyenv >/dev/null 2>&1
then
    python_global_3_9="3.9.13"
    python_global_3_10="3.10.5"

    curl https://pyenv.run | bash
    echo "Installed pyenv and pyenv-virtualenv"

    # See https://github.com/pyenv/pyenv/wiki#suggested-build-environment
    # in case the build fails.
    sudo apt-get install libssl-dev
    $HOME/.pyenv/bin/pyenv install $python_global_3_9
    $HOME/.pyenv/bin/pyenv install $python_global_3_10
    $HOME/.pyenv/bin/pyenv global $python_global_3_9
    echo "Global Python is already set to $python_global_3_9"
else
    echo "Already installed pyenv and pyenv-virtualenv"
fi

# ## Brew
# if ! type -p brew >/dev/null 2>&1
# then
#     /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
#     echo "Installed Brew"
# fi

if ! type -p code >/dev/null 2>&1
then
    sudo snap install --classic code
    echo "Installed VSCode"
else
    echo "Already installed VSCode"
fi

vscode_extensions=(
    ms-python.python
    ms-vscode.cpptools
    xaver.clang-format
    sashaweiss.block-travel
    eamodio.gitlens
    ms-vscode.cmake-tools
    streetsidesoftware.code-spell-checker
)

installed_extensions=$(code --list-extensions)
for extension in ${vscode_extensions[@]}
do
    if ! echo $installed_extensions | grep -q $extension
    then
        code --install-extension $extension
        echo "Installed $extension"
    else
        echo "VSCode extension $extension found"
    fi
done

## lsd
if ! type -p lsd >/dev/null 2>&1
then
    sudo snap install lsd
    # /home/linuxbrew/.linuxbrew/bin/brew install lsd
    echo "Installed lsd"
else
    echo "Already installed lsd"
fi

## Check that fdfind is installed
ln -s $(which fdfind) ~/.local/bin/fd

## Gogh theme install setup
# clone the repo into "$HOME/src/gogh"
gogh_directory="$HOME/src/gogh"
if [ ! -d $gogh_directory ]
then
    mkdir -p "$HOME/src"
    cd "$HOME/src"
    git clone https://github.com/Gogh-Co/Gogh.git gogh
    cd "$gogh_directory/themes"

    # necessary on ubuntu
    export TERMINAL=gnome-terminal

    # install themes
    ./afterglow.sh
    cd "$HOME"
fi

{{ end -}}
{{ if (not (eq .chezmoi.osRelease.id "ubuntu")) -}}
echo "Linux flavour $OSTYPE not recognized."
{{ end -}}
{{ end -}}
